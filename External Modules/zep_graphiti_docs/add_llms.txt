# Add Data

```http
POST https://api.getzep.com/api/v2/graph
Content-Type: application/json
```

Add data to the graph. Note: each subscription tier has different limits on the amount of data that can be added to the graph please refer to the pricing page for more information.



## Response Body

- 202: Added episode
- 400: Bad Request
- 500: Internal Server Error

## Examples

```shell
curl -X POST https://api.getzep.com/api/v2/graph \
     -H "Content-Type: application/json" \
     -d '{
  "data": "data",
  "type": "text"
}'
```

```python
from zep_cloud.client import Zep

client = Zep(
    api_key="YOUR_API_KEY",
)
client.graph.add(
    data="data",
    type="text",
)

```

```typescript
import { ZepClient } from "zep-cloud";

const client = new ZepClient({ apiKey: "YOUR_API_KEY" });
await client.graph.add({
    data: "data",
    type: "text"
});

```

```go
import (
	context "context"
	option "github.com/getzep/zep-go/v2/option"
	v2 "github.com/getzep/zep-go/v2"
	v2client "github.com/getzep/zep-go/v2/client"
)

client := v2client.NewClient(
	option.WithAPIKey(
		"<YOUR_APIKey>",
	),
)
response, err := client.Graph.Add(
	context.TODO(),
	&v2.AddDataRequest{
		Data: "data",
		Type: v2.GraphDataTypeText,
	},
)

```

```shell
curl -X POST https://api.getzep.com/api/v2/graph \
     -H "Content-Type: application/json" \
     -d '{
  "data": "string",
  "type": "text"
}'
```

```python
from zep_cloud.client import Zep

client = Zep(
    api_key="YOUR_API_KEY",
)
client.graph.add(
    data="data",
    type="text",
)

```

```typescript
import { ZepClient } from "zep-cloud";

const client = new ZepClient({ apiKey: "YOUR_API_KEY" });
await client.graph.add({
    data: "data",
    type: "text"
});

```

```go
import (
	context "context"
	option "github.com/getzep/zep-go/v2/option"
	v2 "github.com/getzep/zep-go/v2"
	v2client "github.com/getzep/zep-go/v2/client"
)

client := v2client.NewClient(
	option.WithAPIKey(
		"<YOUR_APIKey>",
	),
)
response, err := client.Graph.Add(
	context.TODO(),
	&v2.AddDataRequest{
		Data: "data",
		Type: v2.GraphDataTypeText,
	},
)

```

```shell
curl -X POST https://api.getzep.com/api/v2/graph \
     -H "Content-Type: application/json" \
     -d '{
  "data": "string",
  "type": "text"
}'
```

```python
from zep_cloud.client import Zep

client = Zep(
    api_key="YOUR_API_KEY",
)
client.graph.add(
    data="data",
    type="text",
)

```

```typescript
import { ZepClient } from "zep-cloud";

const client = new ZepClient({ apiKey: "YOUR_API_KEY" });
await client.graph.add({
    data: "data",
    type: "text"
});

```

```go
import (
	context "context"
	option "github.com/getzep/zep-go/v2/option"
	v2 "github.com/getzep/zep-go/v2"
	v2client "github.com/getzep/zep-go/v2/client"
)

client := v2client.NewClient(
	option.WithAPIKey(
		"<YOUR_APIKey>",
	),
)
response, err := client.Graph.Add(
	context.TODO(),
	&v2.AddDataRequest{
		Data: "data",
		Type: v2.GraphDataTypeText,
	},
)

```